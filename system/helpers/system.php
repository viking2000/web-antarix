<?php  if ( ! defined('BASEPATH')) exit('No direct script access allowed');/** * Created by JetBrains PhpStorm. * User: PHP Development * Date: 15.03.14 * Time: 14:48 * To change this template use File | Settings | File Templates. */if ( ! function_exists('get_string') ){    function get_string($dictionary, $key)    {        static $lang = array();        if ( ! isset($lang[$dictionary]) )        {            $current = Buffer::get(URL_LANG);            if ( empty($current) )            {                include_once  $_SERVER['DOCUMENT_ROOT'] . '/' . APPPATH."language/dictionaries/{$dictionary}.php";            }            else            {                include_once $_SERVER['DOCUMENT_ROOT'] . '/' . APPPATH."language/{$current}/dictionaries/{$dictionary}.php";            }            if ( empty($words) )            {                $words = array();            }            $lang[$dictionary] = $words;            unset($words);        }        return ( array_key_exists($key, $lang[$dictionary]) ) ? $lang[$dictionary][$key] : '';    }}if ( ! function_exists('get_structure') ){    function get_structure($name)    {        static $structures = array();        if ( ! isset($structures[$name]) )        {            $current = Buffer::get(URL_LANG);            if ( empty($current) )            {                include_once $_SERVER['DOCUMENT_ROOT'] . '/' . APPPATH."language/structures/{$name}.php";            }            else            {                include_once $_SERVER['DOCUMENT_ROOT'] . '/' . APPPATH."language/{$current}/structures/{$name}.php";            }            if ( empty($structure) )            {                $structure = array();            }            $structures[$name] = $structure;            unset($structure);        }        return $structures[$name];    }}if ( ! function_exists('config') ){    function config()    {        static $conf;        $key_buffer = 'reloading_config_status';        if ( empty($conf) OR ! is_array($conf) )        {            include_once BASEPATH.'config/config.php';            if ( ! isset($config)  OR ! is_array($config) )            {                exit('Config error');            }            $conf = $config;            unset($config);        }        $status = Buffer::get($key_buffer);        $ap_name = Buffer::get(URL_AP);        if ( ! empty($ap_name) AND $status != $ap_name)        {            if ( ! is_array($conf) )            {                $conf = array();            }            include_once APPPATH."modules/{$ap_name}/config.php";            if ( array_key_exists(URL_AP, $conf) )            {                unset($conf[URL_AP]);            }            if ( ! isset($config) )            {                exit('Config error');            }            $conf[URL_AP] = $config;            Buffer::set($key_buffer, $ap_name);            unset($config);        }        $argv_list = func_get_args();        $cursor =& $conf;        foreach ($argv_list as $key)        {            if ( ! is_array($cursor) OR ! array_key_exists($key, $cursor) )            {                return NULL;            }            $cursor =& $cursor[$key];        }        return $cursor;    }}if ( ! function_exists('include_files') ){    function include_files($dir = NULL, $ext = NULL)    {        if ( ! $dir OR ! $ext)        {            return;        }        $last_symbol = substr($dir, -1);        if ($last_symbol != '/')        {            $dir .= '/';        }        $include_files = scandir($dir);        foreach ($include_files as $name)        {            if ( ! is_file($dir.$name) OR                strpos($name, $ext) === FALSE OR                $name[0] === '_' OR                in_array($name, array( '.', '..')))            {                continue;            }            if (is_dir($dir.$name) )            {                include_files($dir.$name);                continue;            }            include_once $dir.$name;        }    }}if ( ! function_exists('_fatal_error_catcher') ){    function _fatal_error_catcher()    {        $error = error_get_last();        if (empty($error) OR ! ( $error['type'] & (E_ERROR | E_PARSE | E_COMPILE_ERROR | E_CORE_ERROR) ) )        {            return;        }        include_once BASEPATH.'global/log.php';        Log::log_error($error, 'critical');        show_error(500);    }}if ( ! function_exists('_exception_handler') ){    function _exception_handler($severity, $message, $filepath, $line, $errcontext)    {        $exc_data = array('type' => $severity, 'line' => $line, 'file' => $filepath, 'message' => $message);        Log::log_error($exc_data);    }}if ( ! function_exists('is_mobile') ){    function is_mobile()    {        $user_agent = $_SERVER['HTTP_USER_AGENT'];        $client_list = array('iPod', 'iPhone', 'Android', 'Symbian', 'WindowsPhone', 'WP7', 'WP8', 'Opera M', 'webOS',            'BlackBerry', 'Mobile', 'HTC_', 'Fennec', 'zeto', 'zte', 'voda', 'vulc');        foreach ($client_list as $name)        {            if (stripos($user_agent, $name) !== FALSE )            {                return TRUE;            }        }        return FALSE;    }}if ( ! function_exists('get_time') ){    function get_time()    {        static $time;        if ( ! empty($time) )        {            return $time;        }        $time = time();        return $time;    }}if ( ! function_exists('remove_invisible_characters')){    function remove_invisible_characters($str, $url_encoded = TRUE)    {        $non_displayables = array();        // every control character except newline (dec 10)        // carriage return (dec 13), and horizontal tab (dec 09)        if ($url_encoded)        {            $non_displayables[] = '/%0[0-8bcef]/';	// url encoded 00-08, 11, 12, 14, 15            $non_displayables[] = '/%1[0-9a-f]/';	// url encoded 16-31        }        $non_displayables[] = '/[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]+/S';	// 00-08, 11, 12, 14-31, 127        do        {            $str = preg_replace($non_displayables, '', $str, -1, $count);        }        while ($count);        return $str;    }}if ( ! function_exists('show_error') ){    function show_error($code)    {        $code = intval($code);        set_status_header($code);        $error_text = get_string('errors', 'error-'.$code);        $file_content = file_get_contents(FCPATH."modules/errors/error.html");        $file_content = str_replace('{error_text}', $error_text, $file_content);        $file_content = str_replace('{error_code}', $code, $file_content);        exit($file_content);    }}/** * Set HTTP Status Header * @access	public * @param	int		the status code * @param	string * @return	void */if ( ! function_exists('set_status_header')){    function set_status_header($code = 200)    {        $code = intval($code);        $stati = array(            200	=> 'OK',            201	=> 'Created',            202	=> 'Accepted',            203	=> 'Non-Authoritative Information',            204	=> 'No Content',            205	=> 'Reset Content',            206	=> 'Partial Content',            300	=> 'Multiple Choices',            301	=> 'Moved Permanently',            302	=> 'Found',            304	=> 'Not Modified',            305	=> 'Use Proxy',            307	=> 'Temporary Redirect',            400	=> 'Bad Request',            401	=> 'Unauthorized',            403	=> 'Forbidden',            404	=> 'Not Found',            405	=> 'Method Not Allowed',            406	=> 'Not Acceptable',            407	=> 'Proxy Authentication Required',            408	=> 'Request Timeout',            409	=> 'Conflict',            410	=> 'Gone',            411	=> 'Length Required',            412	=> 'Precondition Failed',            413	=> 'Request Entity Too Large',            414	=> 'Request-URI Too Long',            415	=> 'Unsupported Media Type',            416	=> 'Requested Range Not Satisfiable',            417	=> 'Expectation Failed',            500	=> 'Internal Server Error',            501	=> 'Not Implemented',            502	=> 'Bad Gateway',            503	=> 'Service Unavailable',            504	=> 'Gateway Timeout',            505	=> 'HTTP Version Not Supported'        );        if ( ! isset($stati[$code]) )        {            Log::log_error('error code function: set_status_header. code:'.$code);            $code = 500;        }        $text = $stati[$code];        $server_protocol = (isset($_SERVER['SERVER_PROTOCOL'])) ? $_SERVER['SERVER_PROTOCOL'] : FALSE;        if (substr(php_sapi_name(), 0, 3) == 'cgi')        {            header("Status: {$code} {$text}", TRUE);        }        elseif ($server_protocol == 'HTTP/1.1' OR $server_protocol == 'HTTP/1.0')        {            header($server_protocol." {$code} {$text}", TRUE, $code);        }        else        {            header("HTTP/1.1 {$code} {$text}", TRUE, $code);        }    }}